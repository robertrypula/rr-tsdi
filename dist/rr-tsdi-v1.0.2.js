(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["RrTsdi"] = factory();
	else
		root["RrTsdi"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function staticImplements() {
    return function (constructor) { };
}
exports.default = staticImplements;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(2));


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var static_implements_1 = __webpack_require__(0);
exports.staticImplements = static_implements_1.default;
var injector_1 = __webpack_require__(3);
exports.Injector = injector_1.Injector;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var static_implements_1 = __webpack_require__(0);
var injector_helpers_1 = __webpack_require__(4);
var ItemType;
(function (ItemType) {
    ItemType[ItemType["VALUE"] = 0] = "VALUE";
    ItemType[ItemType["CLASS"] = 1] = "CLASS";
    ItemType[ItemType["SERVICE"] = 2] = "SERVICE";
})(ItemType || (ItemType = {}));
var RESOLVE_RECURSION_LIMIT = 20;
var RESOLVE_RECURSION_LIMIT_EXCEED_EXCEPTION = 'Resolve recursion limit exceed';
var MULTIPLE_REGISTER_EXCEPTION = 'Multiple register calls for the same name';
var UNABLE_TO_FIND_ITEM_EXCEPTION = 'Unable to find factory/service for given name: ';
var Injector = /** @class */ (function () {
    function Injector() {
        this.injectRepository = {};
        this.resolveRecursionCounter = 0;
    }
    Injector.prototype.registerValue = function (name, valueItem) {
        this.register(name, valueItem, ItemType.VALUE);
    };
    Injector.prototype.registerClass = function (name, classItem) {
        this.register(name, classItem, ItemType.CLASS);
    };
    Injector.prototype.registerService = function (name, serviceItem) {
        this.register(name, serviceItem, ItemType.SERVICE);
    };
    Injector.prototype.get = function (name) {
        var injectList = [];
        var injectRepositoryEntry, itemType, i, item;
        injectRepositoryEntry = this.getInjectRepositoryEntry(name);
        if (injectRepositoryEntry.resolveCache) {
            return injectRepositoryEntry.resolveCache;
        }
        item = injectRepositoryEntry.item;
        itemType = injectRepositoryEntry.itemType;
        this.resolveRecursionInc();
        for (i = 0; item && item.$inject && (i < item.$inject.length); i++) {
            injectList.push(this.get(item.$inject[i]));
        }
        switch (itemType) {
            case ItemType.VALUE:
                injectRepositoryEntry.resolveCache = item;
                break;
            case ItemType.CLASS:
                injectRepositoryEntry.resolveCache = injector_helpers_1.injectDependencies(item, injectList);
                break;
            case ItemType.SERVICE:
                injectRepositoryEntry.resolveCache = injector_helpers_1.injectDependenciesAndInstantiate(item, injectList);
                break;
        }
        this.resolveRecursionDec();
        return injectRepositoryEntry.resolveCache;
    };
    Injector.prototype.register = function (name, item, itemType) {
        if (typeof this.injectRepository[name] !== 'undefined') {
            throw MULTIPLE_REGISTER_EXCEPTION;
        }
        this.injectRepository[name] = {
            item: item,
            itemType: itemType,
            resolveCache: null
        };
    };
    Injector.prototype.resolveRecursionInc = function () {
        this.resolveRecursionCounter++;
        if (this.resolveRecursionCounter >= RESOLVE_RECURSION_LIMIT) {
            throw RESOLVE_RECURSION_LIMIT_EXCEED_EXCEPTION;
        }
    };
    Injector.prototype.resolveRecursionDec = function () {
        this.resolveRecursionCounter--;
    };
    Injector.prototype.getInjectRepositoryEntry = function (name) {
        var injectRepositoryEntry;
        injectRepositoryEntry = this.injectRepository[name];
        if (typeof injectRepositoryEntry === 'undefined') {
            throw UNABLE_TO_FIND_ITEM_EXCEPTION + name;
        }
        return injectRepositoryEntry;
    };
    Injector = __decorate([
        static_implements_1.default()
    ], Injector);
    return Injector;
}());
exports.Injector = Injector;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TO_MANY_INJECTIONS_EXCEPTION = 'To many injections';
exports.TO_MANY_INJECTIONS_EXCEPTION = TO_MANY_INJECTIONS_EXCEPTION;
function injectDependenciesAndInstantiate(item, injectList) {
    var i = injectList;
    var r;
    switch (injectList.length) {
        case 0:
            r = new item();
            break;
        case 1:
            r = new item(i[0]);
            break;
        case 2:
            r = new item(i[0], i[1]);
            break;
        case 3:
            r = new item(i[0], i[1], i[2]);
            break;
        case 4:
            r = new item(i[0], i[1], i[2], i[3]);
            break;
        case 5:
            r = new item(i[0], i[1], i[2], i[3], i[4]);
            break;
        case 6:
            r = new item(i[0], i[1], i[2], i[3], i[4], i[5]);
            break;
        case 7:
            r = new item(i[0], i[1], i[2], i[3], i[4], i[5], i[6]);
            break;
        case 8:
            r = new item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7]);
            break;
        case 9:
            r = new item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8]);
            break;
        case 10:
            r = new item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8], i[9]);
            break;
        case 11:
            r = new item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8], i[9], i[10]);
            break;
        case 12:
            r = new item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8], i[9], i[10], i[11]);
            break;
        default: throw TO_MANY_INJECTIONS_EXCEPTION;
    }
    return r;
}
exports.injectDependenciesAndInstantiate = injectDependenciesAndInstantiate;
function injectDependencies(item, injectList) {
    var i = injectList;
    var r;
    switch (injectList.length) {
        case 0:
            r = item();
            break;
        case 1:
            r = item(i[0]);
            break;
        case 2:
            r = item(i[0], i[1]);
            break;
        case 3:
            r = item(i[0], i[1], i[2]);
            break;
        case 4:
            r = item(i[0], i[1], i[2], i[3]);
            break;
        case 5:
            r = item(i[0], i[1], i[2], i[3], i[4]);
            break;
        case 6:
            r = item(i[0], i[1], i[2], i[3], i[4], i[5]);
            break;
        case 7:
            r = item(i[0], i[1], i[2], i[3], i[4], i[5], i[6]);
            break;
        case 8:
            r = item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7]);
            break;
        case 9:
            r = item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8]);
            break;
        case 10:
            r = item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8], i[9]);
            break;
        case 11:
            r = item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8], i[9], i[10]);
            break;
        case 12:
            r = item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8], i[9], i[10], i[11]);
            break;
        default: throw TO_MANY_INJECTIONS_EXCEPTION;
    }
    return r;
}
exports.injectDependencies = injectDependencies;


/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,