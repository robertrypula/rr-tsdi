(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["RrTsdi"] = factory();
	else
		root["RrTsdi"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function staticImplements() {
    return function (constructor) { };
}
exports.default = staticImplements;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(2));


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var static_implements_1 = __webpack_require__(0);
exports.staticImplements = static_implements_1.default;
var injector_1 = __webpack_require__(3);
exports.Injector = injector_1.Injector;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var static_implements_1 = __webpack_require__(0);
var ItemType;
(function (ItemType) {
    ItemType[ItemType["VALUE"] = 0] = "VALUE";
    ItemType[ItemType["CLASS"] = 1] = "CLASS";
    ItemType[ItemType["SERVICE"] = 2] = "SERVICE";
})(ItemType || (ItemType = {}));
var Injector = /** @class */ (function () {
    function Injector() {
        this.injectRepository = {};
        this.resolveRecursionCounter = 0;
    }
    Injector_1 = Injector;
    Injector.prototype.registerValue = function (name, valueItem) {
        this.register(name, valueItem, ItemType.VALUE);
    };
    Injector.prototype.registerClass = function (name, classItem) {
        this.register(name, classItem, ItemType.CLASS);
    };
    Injector.prototype.registerService = function (name, serviceItem) {
        this.register(name, serviceItem, ItemType.SERVICE);
    };
    Injector.prototype.get = function (name) {
        var injectRepositoryEntry, injectList = [], itemType, i, item;
        injectRepositoryEntry = this.getInjectRepositoryEntry(name);
        if (injectRepositoryEntry.resolveCache) {
            return injectRepositoryEntry.resolveCache;
        }
        item = injectRepositoryEntry.item;
        itemType = injectRepositoryEntry.itemType;
        this.resolveRecursionInc();
        for (i = 0; item && item.$inject && (i < item.$inject.length); i++) {
            injectList.push(this.get(item.$inject[i]));
        }
        switch (itemType) {
            case ItemType.VALUE:
                injectRepositoryEntry.resolveCache = item;
                break;
            case ItemType.CLASS:
                injectRepositoryEntry.resolveCache = Injector_1.injectDependencies(item, injectList);
                break;
            case ItemType.SERVICE:
                injectRepositoryEntry.resolveCache = Injector_1.injectDependenciesAndInstantiate(item, injectList);
                break;
        }
        this.resolveRecursionDec();
        return injectRepositoryEntry.resolveCache;
    };
    Injector.prototype.register = function (name, item, itemType) {
        if (typeof this.injectRepository[name] !== 'undefined') {
            throw Injector_1.MULTIPLE_REGISTER_EXCEPTION;
        }
        this.injectRepository[name] = {
            itemType: itemType,
            item: item,
            resolveCache: null
        };
    };
    Injector.prototype.resolveRecursionInc = function () {
        this.resolveRecursionCounter++;
        if (this.resolveRecursionCounter >= Injector_1.RESOLVE_RECURSION_LIMIT) {
            throw Injector_1.RESOLVE_RECURSION_LIMIT_EXCEED_EXCEPTION;
        }
    };
    Injector.prototype.resolveRecursionDec = function () {
        this.resolveRecursionCounter--;
    };
    Injector.prototype.getInjectRepositoryEntry = function (name) {
        var injectRepositoryEntry;
        injectRepositoryEntry = this.injectRepository[name];
        if (typeof injectRepositoryEntry === 'undefined') {
            throw Injector_1.UNABLE_TO_FIND_ITEM_EXCEPTION + name;
        }
        return injectRepositoryEntry;
    };
    Injector.injectDependenciesAndInstantiate = function (item, injectList) {
        var i = injectList, r;
        switch (injectList.length) {
            case 0:
                r = new item();
                break;
            case 1:
                r = new item(i[0]);
                break;
            case 2:
                r = new item(i[0], i[1]);
                break;
            case 3:
                r = new item(i[0], i[1], i[2]);
                break;
            case 4:
                r = new item(i[0], i[1], i[2], i[3]);
                break;
            case 5:
                r = new item(i[0], i[1], i[2], i[3], i[4]);
                break;
            case 6:
                r = new item(i[0], i[1], i[2], i[3], i[4], i[5]);
                break;
            case 7:
                r = new item(i[0], i[1], i[2], i[3], i[4], i[5], i[6]);
                break;
            case 8:
                r = new item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7]);
                break;
            case 9:
                r = new item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8]);
                break;
            case 10:
                r = new item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8], i[9]);
                break;
            case 11:
                r = new item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8], i[9], i[10]);
                break;
            case 12:
                r = new item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8], i[9], i[10], i[11]);
                break;
            default: throw Injector_1.TO_MANY_INJECTIONS_EXCEPTION;
        }
        return r;
    };
    Injector.injectDependencies = function (item, injectList) {
        var i = injectList, r;
        switch (injectList.length) {
            case 0:
                r = item();
                break;
            case 1:
                r = item(i[0]);
                break;
            case 2:
                r = item(i[0], i[1]);
                break;
            case 3:
                r = item(i[0], i[1], i[2]);
                break;
            case 4:
                r = item(i[0], i[1], i[2], i[3]);
                break;
            case 5:
                r = item(i[0], i[1], i[2], i[3], i[4]);
                break;
            case 6:
                r = item(i[0], i[1], i[2], i[3], i[4], i[5]);
                break;
            case 7:
                r = item(i[0], i[1], i[2], i[3], i[4], i[5], i[6]);
                break;
            case 8:
                r = item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7]);
                break;
            case 9:
                r = item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8]);
                break;
            case 10:
                r = item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8], i[9]);
                break;
            case 11:
                r = item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8], i[9], i[10]);
                break;
            case 12:
                r = item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8], i[9], i[10], i[11]);
                break;
            default: throw Injector_1.TO_MANY_INJECTIONS_EXCEPTION;
        }
        return r;
    };
    Injector.RESOLVE_RECURSION_LIMIT = 20;
    Injector.RESOLVE_RECURSION_LIMIT_EXCEED_EXCEPTION = 'Injector - resolve recursion limit exceed';
    Injector.MULTIPLE_REGISTER_EXCEPTION = 'Injector - multiple register calls for the same name';
    Injector.UNABLE_TO_FIND_ITEM_EXCEPTION = 'Injector - unable to find factory/service for given name: ';
    Injector.TO_MANY_INJECTIONS_EXCEPTION = 'Injector - to many injections';
    Injector = Injector_1 = __decorate([
        static_implements_1.default()
    ], Injector);
    return Injector;
    var Injector_1;
}());
exports.Injector = Injector;


/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCBhZTQ0ZTIxZmRmZDA4MGI5OGQ0NCIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGljLWltcGxlbWVudHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9wdWJsaWMtYXBpLnRzIiwid2VicGFjazovLy8uL3NyYy9pbmplY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsTztBQ1ZBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBMkIsMEJBQTBCLEVBQUU7QUFDdkQseUNBQWlDLGVBQWU7QUFDaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOERBQXNELCtEQUErRDs7QUFFckg7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7O0FDN0RBO0lBQ0UsTUFBTSxDQUFDLFVBQUMsV0FBYyxJQUFNLENBQUM7QUFDL0IsQ0FBQztBQUZELG1DQUVDOzs7Ozs7Ozs7Ozs7O0FDRkQsaUNBQTZCOzs7Ozs7Ozs7O0FDQTdCLGlEQUFtRDtBQUcxQywyQkFIRiwyQkFBZ0IsQ0FHRTtBQUR6Qix3Q0FBeUU7QUFBaEUsc0NBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7QUNGakIsaURBQW1EO0FBYW5ELElBQUssUUFJSjtBQUpELFdBQUssUUFBUTtJQUNYLHlDQUFLO0lBQ0wseUNBQUs7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SSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUFDLEtBQUssQ0FBQztZQUN4QyxLQUFLLENBQUM7Z0JBQUUsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxDQUFDO1lBQzlDLEtBQUssQ0FBQztnQkFBRSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxDQUFDO1lBQ3BELEtBQUssQ0FBQztnQkFBRSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUFDLEtBQUssQ0FBQztZQUMxRCxLQUFLLENBQUM7Z0JBQUUsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxDQUFDO1lBQ2hFLEtBQUssQ0FBQztnQkFBRSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxDQUFDO1lBQ3RFLEtBQUssQ0FBQztnQkFBRSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUFDLEtBQUssQ0FBQztZQUM1RSxLQUFLLENBQUM7Z0JBQUUsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxDQUFDO1lBQ2xGLEtBQUssRUFBRTtnQkFBRSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxDQUFDO1lBQ3pGLEtBQUssRUFBRTtnQkFBRSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUFDLEtBQUssQ0FBQztZQUNoRyxLQUFLLEVBQUU7Z0JBQUUsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxDQUFDO1lBQ3ZHLFNBQVMsTUFBTSxVQUFRLENBQUMsNEJBQTRCLENBQUM7UUFDdkQsQ0FBQztRQUVELE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRWMsMkJBQWtCLEdBQWpDLFVBQWtDLElBQVMsRUFBRSxVQUFpQjtRQUM1RCxJQUNFLENBQUMsR0FBUSxVQUFVLEVBQ25CLENBQU0sQ0FBQztRQUVULE1BQU0sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQzFCLEtBQUssQ0FBQztnQkFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUM7Z0JBQUMsS0FBSyxDQUFDO1lBQzFCLEtBQUssQ0FBQztnQkFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUFDLEtBQUssQ0FBQztZQUM5QixLQUFLLENBQUM7Z0JBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxDQUFDO1lBQ3BDLEtBQUssQ0FBQztnQkFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxDQUFDO1lBQzFDLEtBQUssQ0FBQztnQkFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUFDLEtBQUssQ0FBQztZQUNoRCxLQUFLLENBQUM7Z0JBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxDQUFDO1lBQ3RELEtBQUssQ0FBQztnQkFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxDQUFDO1lBQzVELEtBQUssQ0FBQztnQkFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUFDLEtBQUssQ0FBQztZQUNsRSxLQUFLLENBQUM7Z0JBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxDQUFDO1lBQ3hFLEtBQUssQ0FBQztnQkFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxDQUFDO1lBQzlFLEtBQUssRUFBRTtnQkFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUFDLEtBQUssQ0FBQztZQUNyRixLQUFLLEVBQUU7Z0JBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxDQUFDO1lBQzVGLEtBQUssRUFBRTtnQkFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxDQUFDO1lBQ25HLFNBQVMsTUFBTSxVQUFRLENBQUMsNEJBQTRCLENBQUM7UUFDdkQsQ0FBQztRQUVELE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBMUljLGdDQUF1QixHQUFXLEVBQUUsQ0FBQztJQUNyQyxpREFBd0MsR0FBVywyQ0FBMkMsQ0FBQztJQUMvRixvQ0FBMkIsR0FBVyxzREFBc0QsQ0FBQztJQUM3RixzQ0FBNkIsR0FBVyw0REFBNEQsQ0FBQztJQUNyRyxxQ0FBNEIsR0FBVywrQkFBK0IsQ0FBQztJQWQzRSxRQUFRO1FBRHBCLDJCQUFnQixFQUFrQjtPQUN0QixRQUFRLENBc0pwQjtJQUFELGVBQUM7O0NBQUE7QUF0SlksNEJBQVEiLCJmaWxlIjoicnItdHNkaS12MS4wLjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJSclRzZGlcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiUnJUc2RpXCJdID0gZmFjdG9yeSgpO1xufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuIFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCBhZTQ0ZTIxZmRmZDA4MGI5OGQ0NCIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXRpY0ltcGxlbWVudHM8VD4oKSB7XHJcbiAgcmV0dXJuIChjb25zdHJ1Y3RvcjogVCkgPT4ge31cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvc3RhdGljLWltcGxlbWVudHMudHMiLCJleHBvcnQgKiBmcm9tICcuL3B1YmxpYy1hcGknO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvaW5kZXgudHMiLCJpbXBvcnQgc3RhdGljSW1wbGVtZW50cyBmcm9tICcuL3N0YXRpYy1pbXBsZW1lbnRzJztcclxuXHJcbmV4cG9ydCB7IEluamVjdG9yLCBJbmplY3RvckludGVyZmFjZSwgSW5qZWN0b3JTdGF0aWMgfSBmcm9tICcuL2luamVjdG9yJztcclxuZXhwb3J0IHsgc3RhdGljSW1wbGVtZW50cyB9O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvcHVibGljLWFwaS50cyIsImltcG9ydCBzdGF0aWNJbXBsZW1lbnRzIGZyb20gJy4vc3RhdGljLWltcGxlbWVudHMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJbmplY3RvckludGVyZmFjZSB7XHJcbiAgcmVnaXN0ZXJWYWx1ZShuYW1lOiBzdHJpbmcsIHZhbHVlSXRlbTogYW55KTogdm9pZDtcclxuICByZWdpc3RlckNsYXNzKG5hbWU6IHN0cmluZywgY2xhc3NJdGVtOiBhbnkpOiB2b2lkO1xyXG4gIHJlZ2lzdGVyU2VydmljZShuYW1lOiBzdHJpbmcsIHNlcnZpY2VJdGVtOiBhbnkpOiB2b2lkO1xyXG4gIGdldChuYW1lOiBzdHJpbmcpOiBhbnlcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJbmplY3RvclN0YXRpYyB7XHJcbiAgbmV3KCk6IEluamVjdG9ySW50ZXJmYWNlO1xyXG59XHJcblxyXG5lbnVtIEl0ZW1UeXBlIHtcclxuICBWQUxVRSxcclxuICBDTEFTUyxcclxuICBTRVJWSUNFXHJcbn1cclxuXHJcbmludGVyZmFjZSBJbmplY3RSZXBvc2l0b3J5RW50cnlJbnRlcmZhY2Uge1xyXG4gIGl0ZW06IGFueSxcclxuICBpdGVtVHlwZTogSXRlbVR5cGUsXHJcbiAgcmVzb2x2ZUNhY2hlOiBhbnlcclxufVxyXG5cclxuQHN0YXRpY0ltcGxlbWVudHM8SW5qZWN0b3JTdGF0aWM+KClcclxuZXhwb3J0IGNsYXNzIEluamVjdG9yIGltcGxlbWVudHMgSW5qZWN0b3JJbnRlcmZhY2Uge1xyXG5cclxuICBwcml2YXRlIGluamVjdFJlcG9zaXRvcnk6IHsgW25hbWU6IHN0cmluZ106IEluamVjdFJlcG9zaXRvcnlFbnRyeUludGVyZmFjZSB9O1xyXG4gIHByaXZhdGUgcmVzb2x2ZVJlY3Vyc2lvbkNvdW50ZXI6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgdGhpcy5pbmplY3RSZXBvc2l0b3J5ID0ge307XHJcbiAgICB0aGlzLnJlc29sdmVSZWN1cnNpb25Db3VudGVyID0gMDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIFJFU09MVkVfUkVDVVJTSU9OX0xJTUlUOiBudW1iZXIgPSAyMDtcclxuICBwcml2YXRlIHN0YXRpYyBSRVNPTFZFX1JFQ1VSU0lPTl9MSU1JVF9FWENFRURfRVhDRVBUSU9OOiBzdHJpbmcgPSAnSW5qZWN0b3IgLSByZXNvbHZlIHJlY3Vyc2lvbiBsaW1pdCBleGNlZWQnO1xyXG4gIHByaXZhdGUgc3RhdGljIE1VTFRJUExFX1JFR0lTVEVSX0VYQ0VQVElPTjogc3RyaW5nID0gJ0luamVjdG9yIC0gbXVsdGlwbGUgcmVnaXN0ZXIgY2FsbHMgZm9yIHRoZSBzYW1lIG5hbWUnO1xyXG4gIHByaXZhdGUgc3RhdGljIFVOQUJMRV9UT19GSU5EX0lURU1fRVhDRVBUSU9OOiBzdHJpbmcgPSAnSW5qZWN0b3IgLSB1bmFibGUgdG8gZmluZCBmYWN0b3J5L3NlcnZpY2UgZm9yIGdpdmVuIG5hbWU6ICc7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgVE9fTUFOWV9JTkpFQ1RJT05TX0VYQ0VQVElPTjogc3RyaW5nID0gJ0luamVjdG9yIC0gdG8gbWFueSBpbmplY3Rpb25zJztcclxuICBcclxuICBwdWJsaWMgcmVnaXN0ZXJWYWx1ZShuYW1lOiBzdHJpbmcsIHZhbHVlSXRlbTogYW55KTogdm9pZCB7XHJcbiAgICB0aGlzLnJlZ2lzdGVyKG5hbWUsIHZhbHVlSXRlbSwgSXRlbVR5cGUuVkFMVUUpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlZ2lzdGVyQ2xhc3MobmFtZTogc3RyaW5nLCBjbGFzc0l0ZW06IGFueSk6IHZvaWQge1xyXG4gICAgdGhpcy5yZWdpc3RlcihuYW1lLCBjbGFzc0l0ZW0sIEl0ZW1UeXBlLkNMQVNTKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZWdpc3RlclNlcnZpY2UobmFtZTogc3RyaW5nLCBzZXJ2aWNlSXRlbTogYW55KTogdm9pZCB7XHJcbiAgICB0aGlzLnJlZ2lzdGVyKG5hbWUsIHNlcnZpY2VJdGVtLCBJdGVtVHlwZS5TRVJWSUNFKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQobmFtZTogc3RyaW5nKTogYW55IHtcclxuICAgIGxldCBcclxuICAgICAgaW5qZWN0UmVwb3NpdG9yeUVudHJ5OiBJbmplY3RSZXBvc2l0b3J5RW50cnlJbnRlcmZhY2UsIFxyXG4gICAgICBpbmplY3RMaXN0OiBhbnlbXSA9IFtdLFxyXG4gICAgICBpdGVtVHlwZTogSXRlbVR5cGUsXHJcbiAgICAgIGk6IG51bWJlciwgXHJcbiAgICAgIGl0ZW06IGFueTtcclxuICAgICAgXHJcbiAgICBpbmplY3RSZXBvc2l0b3J5RW50cnkgPSB0aGlzLmdldEluamVjdFJlcG9zaXRvcnlFbnRyeShuYW1lKTtcclxuICAgIGlmIChpbmplY3RSZXBvc2l0b3J5RW50cnkucmVzb2x2ZUNhY2hlKSB7XHJcbiAgICAgIHJldHVybiBpbmplY3RSZXBvc2l0b3J5RW50cnkucmVzb2x2ZUNhY2hlO1xyXG4gICAgfVxyXG5cclxuICAgIGl0ZW0gPSBpbmplY3RSZXBvc2l0b3J5RW50cnkuaXRlbTtcclxuICAgIGl0ZW1UeXBlID0gaW5qZWN0UmVwb3NpdG9yeUVudHJ5Lml0ZW1UeXBlO1xyXG5cclxuICAgIHRoaXMucmVzb2x2ZVJlY3Vyc2lvbkluYygpO1xyXG4gICAgZm9yIChpID0gMDsgaXRlbSAmJiBpdGVtLiRpbmplY3QgJiYgKGkgPCBpdGVtLiRpbmplY3QubGVuZ3RoKTsgaSsrKSB7XHJcbiAgICAgIGluamVjdExpc3QucHVzaChcclxuICAgICAgICB0aGlzLmdldChpdGVtLiRpbmplY3RbaV0pXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBzd2l0Y2ggKGl0ZW1UeXBlKSB7XHJcbiAgICAgIGNhc2UgSXRlbVR5cGUuVkFMVUU6XHJcbiAgICAgICAgaW5qZWN0UmVwb3NpdG9yeUVudHJ5LnJlc29sdmVDYWNoZSA9IGl0ZW07XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgSXRlbVR5cGUuQ0xBU1M6XHJcbiAgICAgICAgaW5qZWN0UmVwb3NpdG9yeUVudHJ5LnJlc29sdmVDYWNoZSA9IEluamVjdG9yLmluamVjdERlcGVuZGVuY2llcyhpdGVtLCBpbmplY3RMaXN0KTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBJdGVtVHlwZS5TRVJWSUNFOlxyXG4gICAgICAgIGluamVjdFJlcG9zaXRvcnlFbnRyeS5yZXNvbHZlQ2FjaGUgPSBJbmplY3Rvci5pbmplY3REZXBlbmRlbmNpZXNBbmRJbnN0YW50aWF0ZShpdGVtLCBpbmplY3RMaXN0KTtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHRoaXMucmVzb2x2ZVJlY3Vyc2lvbkRlYygpO1xyXG5cclxuICAgIHJldHVybiBpbmplY3RSZXBvc2l0b3J5RW50cnkucmVzb2x2ZUNhY2hlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZWdpc3RlcihuYW1lOiBzdHJpbmcsIGl0ZW06IGFueSwgaXRlbVR5cGU6IEl0ZW1UeXBlKTogdm9pZCB7XHJcbiAgICBpZiAodHlwZW9mIHRoaXMuaW5qZWN0UmVwb3NpdG9yeVtuYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgdGhyb3cgSW5qZWN0b3IuTVVMVElQTEVfUkVHSVNURVJfRVhDRVBUSU9OO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuaW5qZWN0UmVwb3NpdG9yeVtuYW1lXSA9IHtcclxuICAgICAgaXRlbVR5cGU6IGl0ZW1UeXBlLFxyXG4gICAgICBpdGVtOiBpdGVtLFxyXG4gICAgICByZXNvbHZlQ2FjaGU6IG51bGxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlc29sdmVSZWN1cnNpb25JbmMoKTogdm9pZCB7XHJcbiAgICB0aGlzLnJlc29sdmVSZWN1cnNpb25Db3VudGVyKys7XHJcbiAgICBpZiAodGhpcy5yZXNvbHZlUmVjdXJzaW9uQ291bnRlciA+PSBJbmplY3Rvci5SRVNPTFZFX1JFQ1VSU0lPTl9MSU1JVCkge1xyXG4gICAgICB0aHJvdyBJbmplY3Rvci5SRVNPTFZFX1JFQ1VSU0lPTl9MSU1JVF9FWENFRURfRVhDRVBUSU9OO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZXNvbHZlUmVjdXJzaW9uRGVjKCk6IHZvaWQge1xyXG4gICAgdGhpcy5yZXNvbHZlUmVjdXJzaW9uQ291bnRlci0tO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRJbmplY3RSZXBvc2l0b3J5RW50cnkobmFtZTogc3RyaW5nKTogSW5qZWN0UmVwb3NpdG9yeUVudHJ5SW50ZXJmYWNlIHtcclxuICAgIGxldCBpbmplY3RSZXBvc2l0b3J5RW50cnk6IEluamVjdFJlcG9zaXRvcnlFbnRyeUludGVyZmFjZTtcclxuXHJcbiAgICBpbmplY3RSZXBvc2l0b3J5RW50cnkgPSB0aGlzLmluamVjdFJlcG9zaXRvcnlbbmFtZV07XHJcbiAgICBpZiAodHlwZW9mIGluamVjdFJlcG9zaXRvcnlFbnRyeSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgdGhyb3cgSW5qZWN0b3IuVU5BQkxFX1RPX0ZJTkRfSVRFTV9FWENFUFRJT04gKyBuYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBpbmplY3RSZXBvc2l0b3J5RW50cnk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBpbmplY3REZXBlbmRlbmNpZXNBbmRJbnN0YW50aWF0ZShpdGVtOiBhbnksIGluamVjdExpc3Q6IGFueVtdKTogYW55IHtcclxuICAgIGxldFxyXG4gICAgICBpOiBhbnkgPSBpbmplY3RMaXN0LFxyXG4gICAgICByOiBhbnk7XHJcblxyXG4gICAgc3dpdGNoIChpbmplY3RMaXN0Lmxlbmd0aCkge1xyXG4gICAgICBjYXNlIDA6IHIgPSBuZXcgaXRlbSgpOyBicmVhaztcclxuICAgICAgY2FzZSAxOiByID0gbmV3IGl0ZW0oaVswXSk7IGJyZWFrO1xyXG4gICAgICBjYXNlIDI6IHIgPSBuZXcgaXRlbShpWzBdLCBpWzFdKTsgYnJlYWs7XHJcbiAgICAgIGNhc2UgMzogciA9IG5ldyBpdGVtKGlbMF0sIGlbMV0sIGlbMl0pOyBicmVhaztcclxuICAgICAgY2FzZSA0OiByID0gbmV3IGl0ZW0oaVswXSwgaVsxXSwgaVsyXSwgaVszXSk7IGJyZWFrO1xyXG4gICAgICBjYXNlIDU6IHIgPSBuZXcgaXRlbShpWzBdLCBpWzFdLCBpWzJdLCBpWzNdLCBpWzRdKTsgYnJlYWs7XHJcbiAgICAgIGNhc2UgNjogciA9IG5ldyBpdGVtKGlbMF0sIGlbMV0sIGlbMl0sIGlbM10sIGlbNF0sIGlbNV0pOyBicmVhaztcclxuICAgICAgY2FzZSA3OiByID0gbmV3IGl0ZW0oaVswXSwgaVsxXSwgaVsyXSwgaVszXSwgaVs0XSwgaVs1XSwgaVs2XSk7IGJyZWFrO1xyXG4gICAgICBjYXNlIDg6IHIgPSBuZXcgaXRlbShpWzBdLCBpWzFdLCBpWzJdLCBpWzNdLCBpWzRdLCBpWzVdLCBpWzZdLCBpWzddKTsgYnJlYWs7XHJcbiAgICAgIGNhc2UgOTogciA9IG5ldyBpdGVtKGlbMF0sIGlbMV0sIGlbMl0sIGlbM10sIGlbNF0sIGlbNV0sIGlbNl0sIGlbN10sIGlbOF0pOyBicmVhaztcclxuICAgICAgY2FzZSAxMDogciA9IG5ldyBpdGVtKGlbMF0sIGlbMV0sIGlbMl0sIGlbM10sIGlbNF0sIGlbNV0sIGlbNl0sIGlbN10sIGlbOF0sIGlbOV0pOyBicmVhaztcclxuICAgICAgY2FzZSAxMTogciA9IG5ldyBpdGVtKGlbMF0sIGlbMV0sIGlbMl0sIGlbM10sIGlbNF0sIGlbNV0sIGlbNl0sIGlbN10sIGlbOF0sIGlbOV0sIGlbMTBdKTsgYnJlYWs7XHJcbiAgICAgIGNhc2UgMTI6IHIgPSBuZXcgaXRlbShpWzBdLCBpWzFdLCBpWzJdLCBpWzNdLCBpWzRdLCBpWzVdLCBpWzZdLCBpWzddLCBpWzhdLCBpWzldLCBpWzEwXSwgaVsxMV0pOyBicmVhaztcclxuICAgICAgZGVmYXVsdDogdGhyb3cgSW5qZWN0b3IuVE9fTUFOWV9JTkpFQ1RJT05TX0VYQ0VQVElPTjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcjtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIGluamVjdERlcGVuZGVuY2llcyhpdGVtOiBhbnksIGluamVjdExpc3Q6IGFueVtdKTogYW55IHtcclxuICAgIGxldFxyXG4gICAgICBpOiBhbnkgPSBpbmplY3RMaXN0LFxyXG4gICAgICByOiBhbnk7XHJcblxyXG4gICAgc3dpdGNoIChpbmplY3RMaXN0Lmxlbmd0aCkge1xyXG4gICAgICBjYXNlIDA6IHIgPSBpdGVtKCk7IGJyZWFrO1xyXG4gICAgICBjYXNlIDE6IHIgPSBpdGVtKGlbMF0pOyBicmVhaztcclxuICAgICAgY2FzZSAyOiByID0gaXRlbShpWzBdLCBpWzFdKTsgYnJlYWs7XHJcbiAgICAgIGNhc2UgMzogciA9IGl0ZW0oaVswXSwgaVsxXSwgaVsyXSk7IGJyZWFrO1xyXG4gICAgICBjYXNlIDQ6IHIgPSBpdGVtKGlbMF0sIGlbMV0sIGlbMl0sIGlbM10pOyBicmVhaztcclxuICAgICAgY2FzZSA1OiByID0gaXRlbShpWzBdLCBpWzFdLCBpWzJdLCBpWzNdLCBpWzRdKTsgYnJlYWs7XHJcbiAgICAgIGNhc2UgNjogciA9IGl0ZW0oaVswXSwgaVsxXSwgaVsyXSwgaVszXSwgaVs0XSwgaVs1XSk7IGJyZWFrO1xyXG4gICAgICBjYXNlIDc6IHIgPSBpdGVtKGlbMF0sIGlbMV0sIGlbMl0sIGlbM10sIGlbNF0sIGlbNV0sIGlbNl0pOyBicmVhaztcclxuICAgICAgY2FzZSA4OiByID0gaXRlbShpWzBdLCBpWzFdLCBpWzJdLCBpWzNdLCBpWzRdLCBpWzVdLCBpWzZdLCBpWzddKTsgYnJlYWs7XHJcbiAgICAgIGNhc2UgOTogciA9IGl0ZW0oaVswXSwgaVsxXSwgaVsyXSwgaVszXSwgaVs0XSwgaVs1XSwgaVs2XSwgaVs3XSwgaVs4XSk7IGJyZWFrO1xyXG4gICAgICBjYXNlIDEwOiByID0gaXRlbShpWzBdLCBpWzFdLCBpWzJdLCBpWzNdLCBpWzRdLCBpWzVdLCBpWzZdLCBpWzddLCBpWzhdLCBpWzldKTsgYnJlYWs7XHJcbiAgICAgIGNhc2UgMTE6IHIgPSBpdGVtKGlbMF0sIGlbMV0sIGlbMl0sIGlbM10sIGlbNF0sIGlbNV0sIGlbNl0sIGlbN10sIGlbOF0sIGlbOV0sIGlbMTBdKTsgYnJlYWs7XHJcbiAgICAgIGNhc2UgMTI6IHIgPSBpdGVtKGlbMF0sIGlbMV0sIGlbMl0sIGlbM10sIGlbNF0sIGlbNV0sIGlbNl0sIGlbN10sIGlbOF0sIGlbOV0sIGlbMTBdLCBpWzExXSk7IGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OiB0aHJvdyBJbmplY3Rvci5UT19NQU5ZX0lOSkVDVElPTlNfRVhDRVBUSU9OO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2luamVjdG9yLnRzIl0sInNvdXJjZVJvb3QiOiIifQ==