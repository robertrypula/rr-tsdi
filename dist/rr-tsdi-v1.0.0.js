var RrTsdi =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__public_api__ = __webpack_require__(1);
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "Injector", function() { return __WEBPACK_IMPORTED_MODULE_0__public_api__["a"]; });



/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__injector__ = __webpack_require__(2);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__injector__["a"]; });



/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Injector; });
var ItemType;
(function (ItemType) {
    ItemType[ItemType["VALUE"] = 0] = "VALUE";
    ItemType[ItemType["CLASS"] = 1] = "CLASS";
    ItemType[ItemType["SERVICE"] = 2] = "SERVICE";
})(ItemType || (ItemType = {}));
var Injector = /** @class */ (function () {
    function Injector() {
        this.injectRepository = {};
        this.resolveRecursionCounter = 0;
    }
    Injector.prototype.registerValue = function (name, valueItem) {
        this.register(name, valueItem, ItemType.VALUE);
    };
    Injector.prototype.registerClass = function (name, classItem) {
        this.register(name, classItem, ItemType.CLASS);
    };
    Injector.prototype.registerService = function (name, serviceItem) {
        this.register(name, serviceItem, ItemType.SERVICE);
    };
    Injector.prototype.get = function (name) {
        var injectRepositoryEntry, injectList = [], itemType, i, item;
        injectRepositoryEntry = this.getInjectRepositoryEntry(name);
        if (injectRepositoryEntry.resolveCache) {
            return injectRepositoryEntry.resolveCache;
        }
        item = injectRepositoryEntry.item;
        itemType = injectRepositoryEntry.itemType;
        this.resolveRecursionInc();
        for (i = 0; item && item.$inject && (i < item.$inject.length); i++) {
            injectList.push(this.get(item.$inject[i]));
        }
        switch (itemType) {
            case ItemType.VALUE:
                injectRepositoryEntry.resolveCache = item;
                break;
            case ItemType.CLASS:
                injectRepositoryEntry.resolveCache = Injector.injectDependencies(item, injectList);
                break;
            case ItemType.SERVICE:
                injectRepositoryEntry.resolveCache = Injector.injectDependenciesAndInstantiate(item, injectList);
                break;
        }
        this.resolveRecursionDec();
        return injectRepositoryEntry.resolveCache;
    };
    Injector.prototype.register = function (name, item, itemType) {
        if (typeof this.injectRepository[name] !== 'undefined') {
            throw Injector.MULTIPLE_REGISTER_EXCEPTION;
        }
        this.injectRepository[name] = {
            itemType: itemType,
            item: item,
            resolveCache: null
        };
    };
    Injector.prototype.resolveRecursionInc = function () {
        this.resolveRecursionCounter++;
        if (this.resolveRecursionCounter >= Injector.RESOLVE_RECURSION_LIMIT) {
            throw Injector.RESOLVE_RECURSION_LIMIT_EXCEED_EXCEPTION;
        }
    };
    Injector.prototype.resolveRecursionDec = function () {
        this.resolveRecursionCounter--;
    };
    Injector.prototype.getInjectRepositoryEntry = function (name) {
        var injectRepositoryEntry;
        injectRepositoryEntry = this.injectRepository[name];
        if (typeof injectRepositoryEntry === 'undefined') {
            throw Injector.UNABLE_TO_FIND_ITEM_EXCEPTION + name;
        }
        return injectRepositoryEntry;
    };
    Injector.injectDependenciesAndInstantiate = function (item, injectList) {
        var i = injectList, r;
        switch (injectList.length) {
            case 0:
                r = new item();
                break;
            case 1:
                r = new item(i[0]);
                break;
            case 2:
                r = new item(i[0], i[1]);
                break;
            case 3:
                r = new item(i[0], i[1], i[2]);
                break;
            case 4:
                r = new item(i[0], i[1], i[2], i[3]);
                break;
            case 5:
                r = new item(i[0], i[1], i[2], i[3], i[4]);
                break;
            case 6:
                r = new item(i[0], i[1], i[2], i[3], i[4], i[5]);
                break;
            case 7:
                r = new item(i[0], i[1], i[2], i[3], i[4], i[5], i[6]);
                break;
            case 8:
                r = new item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7]);
                break;
            case 9:
                r = new item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8]);
                break;
            case 10:
                r = new item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8], i[9]);
                break;
            case 11:
                r = new item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8], i[9], i[10]);
                break;
            case 12:
                r = new item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8], i[9], i[10], i[11]);
                break;
            default: throw Injector.TO_MANY_INJECTIONS_EXCEPTION;
        }
        return r;
    };
    Injector.injectDependencies = function (item, injectList) {
        var i = injectList, r;
        switch (injectList.length) {
            case 0:
                r = item();
                break;
            case 1:
                r = item(i[0]);
                break;
            case 2:
                r = item(i[0], i[1]);
                break;
            case 3:
                r = item(i[0], i[1], i[2]);
                break;
            case 4:
                r = item(i[0], i[1], i[2], i[3]);
                break;
            case 5:
                r = item(i[0], i[1], i[2], i[3], i[4]);
                break;
            case 6:
                r = item(i[0], i[1], i[2], i[3], i[4], i[5]);
                break;
            case 7:
                r = item(i[0], i[1], i[2], i[3], i[4], i[5], i[6]);
                break;
            case 8:
                r = item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7]);
                break;
            case 9:
                r = item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8]);
                break;
            case 10:
                r = item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8], i[9]);
                break;
            case 11:
                r = item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8], i[9], i[10]);
                break;
            case 12:
                r = item(i[0], i[1], i[2], i[3], i[4], i[5], i[6], i[7], i[8], i[9], i[10], i[11]);
                break;
            default: throw Injector.TO_MANY_INJECTIONS_EXCEPTION;
        }
        return r;
    };
    Injector.RESOLVE_RECURSION_LIMIT = 20;
    Injector.RESOLVE_RECURSION_LIMIT_EXCEED_EXCEPTION = 'Injector - resolve recursion limit exceed';
    Injector.MULTIPLE_REGISTER_EXCEPTION = 'Injector - multiple register calls for the same name';
    Injector.UNABLE_TO_FIND_ITEM_EXCEPTION = 'Injector - unable to find factory/service for given name: ';
    Injector.TO_MANY_INJECTIONS_EXCEPTION = 'Injector - to many injections';
    return Injector;
}());



/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,